我正在开发一个基于 Electron 的文件查看器和编辑应用，需要实现以下功能和技术要求：

1. 基础架构
- 使用 Electron + Vite 构建
- 主进程和渲染进程分离架构
- 使用 contextBridge 进行进程间通信
- 无边框窗口设计
- 使用 javascript 而不是 typescript 开发

2. 文件处理系统
- 实现可扩展的文件处理器架构
- 处理器实例管理：
  - 每个处理器实例应该有唯一标识
  - 处理器实例的生命周期管理
  - 处理器实例的 IPC 通道管理
- 处理器目录结构：
  ```
  src/
    handlers/            # 主进程处理器代码
      base.js            # 基础处理器类
      handlerManager.js  # 处理器管理器
    renderer/
      handlers/          # 渲染进程处理器代码
        [type]/          # 具体文件类型处理器
          main.js        # 处理器主进程逻辑
          index.html     # 处理器视图
          config.json    # 处理器配置，包含：
            - 处理器名称
            - 支持的文件类型
            - 窗口配置（尺寸、外观等）
            - 功能配置
          styles/        # 样式文件
          scripts/       # 渲染进程脚本
  ```

3. 文件处理器功能
- 自动扫描和加载处理器
- 通过配置文件注册文件类型
- 处理器通信机制：
  - 每个处理器实例使用唯一的 IPC 通道
  - IPC 通道命名规范：`${type}:${action}:${instanceId}`
  - 处理器实例销毁时清理相关 IPC 通道
- 支持处理器独立的界面和样式
- 处理器间共享基础类和通用功能
- 根据文件类型，自动选择对应的处理器并打开界面
- 没有选择文件时，默认提示请拖入文件，拖入文件后根据文件类型加载不同的处理器
- 拖入文件后，默认打开文件，如果文件类型不支持，则提示文件类型不支持
- 支持拖入文件后，自动挂载处理器
- 支持拖入文件后，自动打开、加载文件，并通过日志打印当前挂在的处理器类型

4. 窗口管理
- 支持主窗口和文件查看窗口
- 自定义窗口标题栏
- 窗口最大化/最小化/关闭控制
- 可通过按下 ESC 键关闭窗口
- 拖放文件支持
- 空启动时显示拖放功能，拖放文件后根据文件类型自动挂载不同处理器打开文件
- 每个窗口可单独关闭，且不影响其他窗口

5. 文件关联
- 支持作为默认程序打开文件
- 处理命令行参数启动
- 支持多实例启动
- 支持多种类型文件的打开

6. 开发工具
- 处理器生成脚本
- 开发环境热重载
- 日志系统

7. 构建与发布
- 使用 electron-builder 打包
- 支持 Windows 安装程序
- 自动更新支持
- 依赖包约束
  - "electron": "30.0.1",
  - "electron-builder": "^25.0.5",
- 运行脚本
  - "dev": "concurrently \"vite\" \"cross-env NODE_ENV=development electron .\""
  - "build": "vite build && electron-builder --win --publish=always"
  - "generate-icons": "node scripts/generate-icons.js"

8. 安全性要求
- 进程隔离
- contextIsolation 启用
- 文件协议安全处理
- IPC 通信安全：
  - 避免 IPC 通道冲突
  - 及时清理不再使用的 IPC 通道
  - 验证 IPC 消息来源

9. 扩展性
- 支持插件化扩展，在/src/renderer/handlers/ 目录下创建插件文件夹，引入插件文件夹下的index.html
- 插件系统架构

10. 文件类型支持以及功能描述
- 通用功能描述：
    - 自定义无边框窗口
    - 操作按钮在页面下方居中显示，半透明，美观大方，自动隐藏
    - 响应式布局
    - 界面简约、美观大方
    - 文件保存功能、字体大小调整，可通过快捷键 Ctrl+S 保存
    - 搜索和替换功能
    - 每个处理器都支持拖入文件后，自动挂载处理器
    - 每个处理器窗口的最大化、最小化、关闭功能都完整可用
- 按文件类型功能描述：
    - Image：
      - 支持查看常见图片格式
      - 图片初始加载时，自动居中
      - 图片初始加载时，当图片长宽小于窗口长宽时，图片居中显示，按原尺寸显示
      - 图片初始加载时，当图片长宽有任意一边大于窗口长宽时，图片居中显示，以窗口长宽或高度为基准进行缩放
      - 支持图片缩放（按钮、滚轮、快捷键）。
      - 使用鼠标滚轮进行图片缩放时以鼠标中心为原点进行缩放
      - 图片拖动，不支持惯性滚动
      - 优雅的加载和错误状态
      - 居中的美观的半透明工具栏，鼠标离开图片时自动隐藏工具栏，鼠标悬浮在图片时自动显示工具栏
        - 图片向左旋转90度，显示图标：↺
        - 图片向右旋转90度，显示图标：↻
        - 图片缩放，显示图标：+ -
        - 还原(重置到初始状态)，显示图标：⟲
        - 实际大小切换，显示图标：1:1
        - 适应屏幕窗口大小，显示图标：↔
        - 全屏模式，显示图标：⊞
      - 键盘快捷键支持
      - 平滑的动画效果
      - 优化缩放时的位置调整
      - 添加鼠标指针样式反馈
      - 优化事件处理逻辑
      - 全屏模式支持
    - TXT：
      - 支持行号显示、光标位置显示、Tab键支持
      - 支持搜索和替换
      - 支持文件保存
      - 支持字体大小调整
      - 仅支持txt文本编辑，不支持图片、视频、音频等其他媒体类型
    - Video：
      - 支持常见视频格式的播放
      - 自定义播放控制界面
      - 进度条控制（带预览效果）
      - 音量控制
      - 时间显示
      - 画中画模式
      - 全屏模式
      - 键盘快捷键支持
      - 优雅的加载和错误状态
      - 美观的半透明控制栏
      - 自动隐藏控制栏
      - 平滑的动画效果
    - Code：
      - 支持常见代码语言的编辑
      - 支持代码高亮
      - 支持代码折叠
      - 支持代码格式化
      - 支持代码自动补全
      - 支持代码自动格式化
      - 支持代码自动补全
    - PDF：
      - 支持常见PDF文件的查看
    - Markdown：实时预览 Markdown 内容、语法高亮、行号显示、光标位置显示、Tab键支持、支持导出 PDF
    - JSON：行号显示、光标位置显示、Tab键支持，语法高亮功能、一键美化、一键格式化、自动补全功能、JSON Schema 验证
    - XML：行号显示、光标位置显示、Tab键支持，语法高亮功能、一键美化、一键格式化、自动补全功能、XML 树形视图、XML Schema 验证
    - YAML：行号显示、光标位置显示、Tab键支持，语法高亮功能、一键美化、一键格式化、自动补全功能、YAML Schema 验证
    

请帮我实现这个应用，需要注意：
1. 代码结构清晰，便于维护
2. 处理器系统易于扩展
3. 性能优化
4. 错误处理完善
5. 用户体验友好
6. 界面美观大方，简约而不简单
7. 功能齐全，性能稳定，用户体验良好
8. 代码简洁，易于维护
9. 代码注释清晰，便于理解
10. 代码风格统一，便于维护
11. UI 设计美观大方，简约而不简单，且公共部分所有窗口统一

你可以从以下任何部分开始：
- 项目基础架构搭建
- 处理器系统实现
- 具体文件类型处理器开发
- 界面设计与实现
- 构建与发布配置

限制：
1. 不能修改已有文件，只能添加新文件，如果逻辑不符合要求，请提出

